# secrets.GCP_SERVICE_ACCOUNT_KEY_PRO
# sokontokoro-factory-6c91723b1fe7.json

name: ci

on:
  push:
    branches:
      - master
      - develop

  schedule:
    - cron: "0 9 * * *"

env:
  NODE_VERSION: 10.x
  # https://github.com/google-github-actions/setup-gcloud/blob/master/setup-gcloud/README.md#prerequisites
  # https://www.python.org/downloads/
  PYTHON_VERSION: 2.7.18

defaults:
  run:
    shell: bash

jobs:
  build-web:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      # https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: "Get yarn cache directory path"
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: "Restore yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install

      - run: yarn build:share
      - run: yarn build:web:dev

  build-and-upload-win32:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      # https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: "Get yarn cache directory path"
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: "Restore yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install

      - run: yarn build:share
      - run: yarn build:desktop:win32

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PRO }}
          export_default_credentials: true
        env:
          CLOUDSDK_PYTHON: ${{env.pythonLocation}}\python.exe

      - name: Upload distribution
        run: gsutil cp -r packages/desktop/out/make gs://download.sokontokoro-factory.net/coupling-tune-player/${{ github.sha }}/
        env:
          CLOUDSDK_PYTHON: ${{env.pythonLocation}}\python.exe

  build-and-upload-darwin:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      # https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: "Get yarn cache directory path"
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: "Restore yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install

      - run: yarn build:share
      - run: yarn build:desktop:darwin

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PRO }}
          export_default_credentials: true

      - name: Upload distribution
        run: gsutil cp -r packages/desktop/out/make gs://download.sokontokoro-factory.net/coupling-tune-player/${{ github.sha }}/

  notify:
    runs-on: macos-latest
    needs:
      - build-web
      - build-and-upload-win32
      - build-and-upload-darwin
    if: always()
    steps:
      # run this action to get workflow conclusion
      # You can get conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: technote-space/workflow-conclusion-action@v2

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          fields: all
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
